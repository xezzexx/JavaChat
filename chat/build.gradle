import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

javafx {
    version = "21.0.5"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation 'org.openjfx:javafx-controls:21.0.5'
    implementation 'org.openjfx:javafx-fxml:21.0.5'

    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
}

tasks.register('shadowJarClient', ShadowJar) {
    archiveBaseName.set("chat-client")
    archiveVersion.set("1.0-SNAPSHOT")
    archiveClassifier.set("")
    manifest {
        attributes(
                'Main-Class': 'org.mainchat.LauncherApp' // Точка входа клиента
        )
    }
    dependsOn ':shadowJarServer'
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}

tasks.register('shadowJarServer', ShadowJar) {
    archiveBaseName.set("chat-server")
    archiveVersion.set("1.0-SNAPSHOT")
    archiveClassifier.set("")
    manifest {
        attributes(
                'Main-Class': 'org.mainchat.LauncherServer' // Точка входа сервера
        )
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}

// Задача для сборки обоих JAR
tasks.register('buildAll') {
    group = 'build'
    description = 'Собрать клиент и сервер JAR'
    dependsOn 'shadowJarServer', 'shadowJarClient'
}

// Настройка задачи build для выполнения buildAll
tasks.build {
    dependsOn 'buildAll'
}

tasks.register('runClient') {
    group = 'application'
    description = 'Запуск клиента'
    dependsOn 'shadowJarClient'
    doLast {
        javaexec {
            mainClass.set('org.mainchat.LauncherApp')
            classpath = sourceSets.main.runtimeClasspath
            jvmArgs = ['--module-path', configurations.runtimeClasspath.asPath, '--add-modules', 'javafx.controls,javafx.fxml']
        }
    }
}

tasks.register('runServer') {
    group = 'application'
    description = 'Запуск сервера'
    dependsOn 'shadowJarServer'
    doLast {
        javaexec {
            mainClass.set('org.mainchat.LauncherServer')
            classpath = sourceSets.main.runtimeClasspath
            jvmArgs = ['--module-path', configurations.runtimeClasspath.asPath, '--add-modules', 'javafx.controls,javafx.fxml']
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}
